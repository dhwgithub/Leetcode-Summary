/**
给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，
使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

进阶：
    一个直观的解决方案是使用计数排序的两趟扫描算法。
    首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
    你能想出一个仅使用常数空间的一趟扫描算法吗？

方法：双指针。一个指向0，一个指向nums.length-1。然后开始一遍遍历直到i == p2
	注意当置换i和p2为的值时，可能都是2，因此需要不断判断，直到不为2为止
 */

class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int p0 = 0;
        int p2 = n - 1;
        for (int i = 0; i <= p2; i ++) {
            while (i < p2 && nums[i] == 2) { // 防止将nums[o2]=2的情况忽略了
                int t = nums[i];
                nums[i] = nums[p2];
                nums[p2] = t;
                p2 --;
            }
            if (nums[i] == 0) {
                int t = nums[i];
                nums[i] = nums[p0];
                nums[p0] = t;
                p0 ++;
            }
        }
    }
}